-----Rendszerterv-----


1. Használt eszközök
Programozási nyelv: Java
Megjelenítési eszköz: JavaFx
Adatbázis: MySQL, Java Persistence API

2. A program részletes működése
A program két részből áll, a bejelentkezési felület és a menü, ahol a teendők jelennek
meg. A programot a model-view-controller tervezési minta alapján készítjük.

2.1. Bejelentkezési rendszer
A login képernyőn kezdünk. A terv_login.png-n jól látható, hogy ez tartalmaz középen 
felül egy szöveget, ami bármi lehet megegyezés alapján, és egy felhasználónevet 
és jelszót bekérő űrlapot. Bejelentkezéshez szükséges egy felhasználónév és egy 
jelszó. A jelszó csak az admin módba való belépéshez szükséges. A login rendszer 
úgy működik, mint egy szűrő. Ha Alkalmazott1 jelentkezik be, akkor csak az ő teendői 
jelennek meg. Ezt úgy oldjuk meg, hogy az összes teendő közül kiszűrjük azokat, 
amelyek Alkalmazott1-hez tartoznak és csak azokat jelenítjük meg. Ha admin jelentkezik
be, akkor az adatbázisból lekérjük az adminhoz tartozó jelszót, majd összehasonlítjuk
a jelszó mezőbe beírt jelszóval. Ha nem egyeznek meg, akkor hibaüzenet kerül kiírásra
és újból be kell jelentkezni. Ha megfelelő jelszó került beírásra, akkor sikeres
a bejelentkezés és megjelenik az admin felület. Ha véletlenül, egy olyan alkalmazott
jelentkezik be, akinek a nevéhez nincs teendő az adatbázisban, akkor nem történik
hiba, egyszerűen csak nem fog egy teendőt sem látni. Éppen ezért nem szükséges az
alkalmazottak felhasználónevének az érvényesítése. Mert igazából "asdasd" is beléphet,
max nem fog látni teendőt.

2.2. Menü
A menü nem más, mint a felhasználói felület, ahol a teendők jelennek meg. Középen 
felül jelenik meg a dátum, illetve két nyíl. A bal felső sarokban a bejelentkezett
felhasználó neve található. Ez alatt a rendezési szempontot beállító gomb található.
Majd ezek alatt maga a teendők listája található. Ez legjobban a terv_menü_admin.png
és terv_menü_alkalmazott.png tervrajzokon látható. Attól függően, hogy adminként,
vagy alkalmazottként jelentkezik be a felhasználó, az annak megfelelő funkciók válnak
elérhetővé. Admin esetében a Teendő hozzáadása is megjelenik, funkciója magától erthető. 

2.2.1. A teendők megjelenítése
A teendők megjelenítésére egy vertikális konténer fog szolgálni. Egy teendő, az
egy bejegyzés, ami a 4.Adatszerkezet pontban van kidolgozva. Innentől teendő alatt
egy olyan bejegyzést értek. A vertikális konténerben horizontális konténerek lesznek.
Egy ilyen konténer egy teendőért felel. Ebbe a konténerbe kerülnek be a teendő 
adatai. 

2.2.2. Rendezés
A rendezés szempontjai: hozzáadási sorrend, leírás/név, határidő, alkalmazott alapján.
A rendezés az adatbázisból való lekérdezéskor történik meg. Amint új rendezési szempont
került beállításra, a bejegyzések újból kiírásra kerülnek, hogy már az új rendezés
legyen látható. A rendezés funkció elérhető mind az alkalmazottak, mind az admin
számára.

2.2.3. Új teendő hozzáadása
Új teendőt hozzáadni csak az admin tud, ezért ez a funkció az alkalmazottak számára
nem is látható. A "Teendő hozzáadása..." mezőbe kattintva lehet beírni az új teendőt,
majd enter megnyomásakor az oda beírt szöveg bekerül az adatbázisba. Majd az adatbázisból
újból lekérdezésre kerülnek a teendők, az aktuális rendezés alapján, majd megjelenítésre
kerülnek a teendők. A megjelenített teendőkhöz rendelhető szín, amit a teendő leírása/
neve előtt található négyzettel lehet megtenni, valamint határidő, illetve alkalmazott.
Ezek az adatok mind tárolásra kerülnek az adatbázisban a megfelelő teendőhöz tartozó
táblában. Csak abban az esetben lehet sikeres a teendő hozzáadása, amennyiben minden kötelező mezőt kitöltünk. 

2.2.4. A napok közötti navigálás
A napok közötti navigálás elérhető mind az alkalmazottak, mind az admin számára.
Ez a dátum előtt, illetve után található nyilak segítségével tehető meg. Valamint 
lehetőség van a dátumra kattintva egyedileg beírni egy dátumot. Amint új dátum kerül
megadásra, az adatbázisból lekérésre kerülnek, az éppen aktuális rendezési beállításokkal,
illetve szűrési beállításokkal, a megfelelő naphoz tartozó teendők, majd megjelenítésre
kerülnek.

2.2.5. Az admin felület és az alkalmazott felület különbségei
Az admin számára jóval több funkció áll rendelkezésre. Míg az alkalmazott csak megnézni
tudja a teendőket, addig az admin tudja szerkeszteni azokat és újakat is hozzá tud 
adni. Míg az alkalmazottnak csak a saját nevére szóló teendői jelennek meg, addig
az admin az összes alkalmazott teendőjét látja.

3. Adatbázis kezelése
A teendők tárolására egy adatbázist fogunk használni, amihez a remotemysql.com
szolgáltatását fogjuk igénybe venni. Továbbá, az adatok tárolásához a Java 
Persistence API-t és a hibernate függőséget használjuk. Ezen az adatbázison
tároljuk a teendőket és a admin jelszavát is. Az első, bejelentkező képernyőn,
amikor a felhasználó adatait bekérjük, kétféleképpen járunk el. Ha az adott 
felhasználó a 'felhasználónév' mezőbe "admin"-t ad meg, akkor megnézzük, hogy
a hozzá megadott jelszó megegyezik-e az adatbázisban tárolt jelszóval. Ha igen,
akkor megjelenítjük neki az összes alkalmazott teendőjét, ha viszont nem, akkor
nem jelenítünk meg semmilyen adatot és újra be kell jelentkezzen. Amennyiben
a felhasználó a névhez nem társít jelszót is, akkor az adott névhez tartozó 
teendőket jelenítjük meg. Ez nem biztonsági rés, hiszen az alkalmazottak 
teendői nem titkos egymás számára. Ezt követően a teendőket listázó és annak
hozzáadását lehetővé tevő képernyő jön be. Ezeket a teendőket egy saját táblán
tároljuk. Erről a tábláról olvassuk ki egy SQL lekéréssel a megfelelő napra vonatkozó
adatokat. Ha a felhasználó más sorrendben akarja látni őket és használja a
'rendezési szempont' funkciót, akkor másik SQL lekérést használunk és 'order by'
segítségével a kívánt sorrendbe rendezzük a teendőket. A teendők hozzáadásánál
is hasonlóképen járunk el. Bekérjük az elmenteni kívánt adatokat, teendőket és
azokat egy SQL 'insert'-tel beszúrjuk a táblába az adott felhasználó nevével
együtt. Ez a funkció viszont csak az admin számára elérhető, így ő adja meg
azt is, hogy kinek akarja a teendőt felírni.

4. Adatszerkezet
Minden bejegyzés egy külön objektum, ami áll egy leírásból, egy színből, egy határidőből,
egy sorszámból és egy hozzárendelt alkalmazottból. Ezek a bejegyzések kerülnek 
majd megjelenítésre. Ezeket az objektumokat az adatbázison fogjuk tárolni táblákban.
